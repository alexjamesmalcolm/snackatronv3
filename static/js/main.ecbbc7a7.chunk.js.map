{"version":3,"sources":["screens/home/home.js","redux/actions/service.js","redux/actions/user.action.js","screens/App.js","redux/reducers/user.reducer.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["App","users","this","props","user","className","map","u","i","key","email","Component","connect","dispatch","bindActionCreators","config","Service","url","body","types","type","init","post","data","error","success","get","console","log","fetch","json","JSON","stringify","res","status","getUsers","dispatchGet","onClick","initialState","name","isLoggedIn","rootReducer","combineReducers","state","action","middleware","thunk","store","createStore","app","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"uTAKMA,G,uLACM,IACAC,EAAUC,KAAKC,MAAMC,KAArBH,MACR,OACE,yBAAKI,UAAU,QACZJ,EAAMK,KAAI,SAACC,EAAGC,GAAJ,OACT,yBAAKC,IAAKD,GAAID,EAAEG,e,GANRC,cAaHC,eACb,kBAAe,CAAER,KAAjB,EAAGA,SACH,SAAAS,GAAQ,OAAIC,YAAmB,GAAID,KAFtBD,CAGbZ,G,uBCrBIe,EACK,yBAEUC,E,mJACOH,EAAUI,EAAKC,EAAMC,G,8EAC7CN,EAAS,CAAEO,KAAMD,EAAME,O,SAEJnB,KAAKoB,KAAKL,EAAKC,G,QAA5BK,E,QAEDC,MACDX,EAAS,CAAEO,KAAMD,EAAMK,MAAOA,MAAOD,EAAKC,QAC1CX,EAAS,CAAEO,KAAMD,EAAMM,QAASF,KAAMA,EAAKA,O,wLAExBV,EAAUI,EAAKE,G,8EACtCN,EAAS,CAAEO,KAAMD,EAAME,O,SAEJnB,KAAKwB,IAAIT,G,QAAtBM,E,QAEDC,MACDX,EAAS,CAAEO,KAAMD,EAAMK,MAAOA,MAAOD,EAAKC,QAC1CX,EAAS,CAAEO,KAAMD,EAAMM,QAASF,KAAMA,EAAKA,O,8KAGhCN,G,8EACfU,QAAQC,IAAIb,EAAiBE,G,kBAEVY,MAAMd,EAAiBE,G,cAApCM,E,gBACiBA,EAAKO,O,6CAAjBP,K,kEAEF,CAAEC,MAAM,EAAD,K,qLAIAP,EAAKC,G,gGAEFW,MAAM,CACrBZ,IAAKF,EAAiBE,EACtBG,KAAM,OACNF,KAAMa,KAAKC,UAAUd,K,cAHnBK,E,gBAMiBA,EAAKO,O,6CAAjBP,K,kEAEF,CAAEC,MAAM,EAAD,K,wJAIIS,GACpB,OAAmB,MAAfA,EAAIC,OAAuBD,EACxB,CAAEH,KAAM,iBAAO,CAAEN,MAAO,W,KC/CtBW,EAAW,kBAAM,SAAAtB,GAC5BG,EAAQoB,YAAYvB,EAAU,OAAQ,CACpCQ,KAAM,YACNI,QAAS,oBACTD,MAAO,uBCELxB,G,uLAEF,OACE,yBAAKK,UAAU,OACb,4BAAQA,UAAU,cAChB,4BAAQgC,QAASnC,KAAKC,MAAMgC,UAA5B,SACA,kBAAC,EAAD,Y,GANQxB,cAaHC,eACb,kBAAe,CAAER,KAAjB,EAAGA,SACH,SAAAS,GAAQ,OAAIC,YAAmB,CAAEqB,YAAYtB,KAFhCD,CAGbZ,G,ykBCxBF,IAAMsC,EAAe,CACnBrC,MAAO,CAAC,CAAEsC,KAAM,QAChBC,YAAY,GCKCC,EAJKC,YAAgB,CAClCtC,KDCa,WAAmC,IAAlCuC,EAAiC,uDAAzBL,EAAcM,EAAW,uCAE/C,OADAjB,QAAQC,IAAIgB,GACJA,EAAOxB,MACb,IAAK,oBACH,OAAO,EAAP,GACKuB,EADL,CAEE1C,MAAO2C,EAAOrB,MAAQ,KAE1B,IAAK,QACH,OAAO,EAAP,GACKoB,EADL,CAEEH,YAAY,IAEhB,QACE,OAAO,EAAP,GAAYG,OEhBZE,EAAa,CAACC,KAELC,EADDC,YAAYC,EAAKC,IAAe,WAAf,EAAmBL,ICGlDM,IAASC,OACL,kBAAC,IAAD,CAAUL,MAAOA,GACb,kBAAC,EAAD,OACSM,SAASC,eAAe,W","file":"static/js/main.ecbbc7a7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport \"./home.css\";\n\nclass App extends Component {\n  render() {\n    const { users } = this.props.user;\n    return (\n      <div className=\"home\">\n        {users.map((u, i) => (\n          <div key={i}>{u.email}</div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  ({ user }) => ({ user }),\n  dispatch => bindActionCreators({}, dispatch)\n)(App);\n","const config = {\n  baseUrl: \"http://localhost:8000/\"\n};\nexport default class Service {\n  static async dispatchPost(dispatch, url, body, types) {\n    dispatch({ type: types.init });\n\n    const data = await this.post(url, body);\n\n    data.error\n      ? dispatch({ type: types.error, error: data.error })\n      : dispatch({ type: types.success, data: data.data });\n  }\n  static async dispatchGet(dispatch, url, types) {\n    dispatch({ type: types.init });\n\n    const data = await this.get(url);\n\n    data.error\n      ? dispatch({ type: types.error, error: data.error })\n      : dispatch({ type: types.success, data: data.data });\n  }\n\n  static async get(url) {\n    console.log(config.baseUrl + url);\n    try {\n      let data = await fetch(config.baseUrl + url);\n      return { data: await data.json() };\n    } catch (e) {\n      return { error: e };\n    }\n  }\n\n  static async post(url, body) {\n    try {\n      let data = await fetch({\n        url: config.baseUrl + url,\n        type: \"POST\",\n        body: JSON.stringify(body)\n      });\n\n      return { data: await data.json() };\n    } catch (e) {\n      return { error: e };\n    }\n  }\n\n  static handleResponse(res) {\n    if (res.status !== 404) return res;\n    return { json: () => ({ error: 404 }) };\n  }\n}\n","import Service from \"./service\";\n\nexport const getUsers = () => dispatch => {\n  Service.dispatchGet(dispatch, \"user\", {\n    init: \"GET_USERS\",\n    success: \"GET_USERS_SUCCESS\",\n    error: \"GET_USERS_FAILED\"\n  });\n};\n\nexport const login = () => dispatch => {\n  dispatch({ type: \"LOGIN\" });\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport Home from \"./home/home\";\nimport { getUsers } from \"redux/actions/user.action\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <button onClick={this.props.getUsers}>Login</button>\n          <Home />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  ({ user }) => ({ user }),\n  dispatch => bindActionCreators({ getUsers }, dispatch)\n)(App);\n","const initialState = {\n  users: [{ name: \"bob\" }],\n  isLoggedIn: false\n};\n\nexport default (state = initialState, action) => {\n  console.log(action);\n  switch (action.type) {\n    case \"GET_USERS_SUCCESS\":\n      return {\n        ...state,\n        users: action.data || []\n      };\n    case \"LOGIN\":\n      return {\n        ...state,\n        isLoggedIn: true\n      };\n    default:\n      return { ...state };\n  }\n};\n","import { combineReducers } from \"redux\";\nimport user from \"./user.reducer\";\n\nconst rootReducer = combineReducers({\n  user\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport app from './reducers';\nconst middleware = [thunk];\nconst store = createStore(app, applyMiddleware(...middleware));\nexport default store;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './screens/App';\nimport store from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}